{"id":"nat_mul_comm","topic":"algebra.basic","english":{"statement":"For all natural numbers a and b, a * b = b * a.","steps":["We use commutativity of multiplication on naturals."]},"lean":{"imports":[],"theorem":"theorem nat_mul_comm (a b : Nat) : a * b = b * a := Nat.mul_comm a b"}}
{"id":"eq_refl","topic":"logic.eq","english":{"statement":"For any type α and any element a of type α, a = a.","steps":["We use reflexivity of equality."]},"lean":{"imports":[],"theorem":"theorem eq_refl {α : Type} (a : α) : a = a := Eq.refl a"}}
{"id":"nat_right_distrib","topic":"algebra.basic","english":{"statement":"For all natural numbers a, b, and c, (a + b) * c = a * c + b * c.","steps":["We use right distributivity of multiplication over addition."]},"lean":{"imports":[],"theorem":"theorem nat_right_distrib (a b c : Nat) : (a + b) * c = a * c + b * c := Nat.right_distrib a b c"}}
{"id":"prop_or_assoc","topic":"logic.prop","english":{"statement":"For any propositions P, Q, and R, (P ∨ Q) ∨ R is equivalent to P ∨ (Q ∨ R).","steps":["We show both directions by nested case analysis on the disjunctions."]},"lean":{"imports":[],"theorem":"theorem prop_or_assoc (P Q R : Prop) : (P ∨ Q) ∨ R ↔ P ∨ (Q ∨ R) := ⟨fun h => h.elim (fun h' => h'.elim Or.inl (Or.inr ∘ Or.inl)) (Or.inr ∘ Or.inr), fun h => h.elim (Or.inl ∘ Or.inl) (fun h' => h'.elim (Or.inl ∘ Or.inr) Or.inr)⟩"}}
{"id":"nat_add_right_cancel","topic":"nat.basic","english":{"statement":"For all natural numbers a, b, and c, if a + c = b + c, then a = b.","steps":["We use the right cancellation property of addition on naturals."]},"lean":{"imports":[],"theorem":"theorem nat_add_right_cancel (a b c : Nat) : a + c = b + c → a = b := Nat.add_right_cancel"}}
